{"ast":null,"code":"var _jsxFileName = \"/Users/elenarima/Desktop/projects/sudoku/src/App.js\";\nimport styles from \"./styles/App.module.css\";\n\n//move cells from already created sudoku\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction removeCells(grid, numCells) {\n  // Make a copy of the grid to modify\n  let partialGrid = JSON.parse(JSON.stringify(grid));\n\n  // Get a list of all the cell positions\n  let positions = [];\n  for (let row = 0; row < 9; row++) {\n    for (let col = 0; col < 9; col++) {\n      positions.push([row, col]);\n    }\n  }\n\n  // Shuffle the positions list to select cells randomly\n  for (let i = positions.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [positions[i], positions[j]] = [positions[j], positions[i]];\n  }\n\n  // Remove the specified number of cells from the partial grid\n  for (let i = 0; i < numCells; i++) {\n    let [row, col] = positions[i];\n    partialGrid[row][col] = null;\n  }\n  return partialGrid;\n}\n\n//sudoku filling algorithm from zero\n\nfunction fillSudoku(sudoku, row, col) {\n  if (col === 9) {\n    col = 0;\n    row++;\n  }\n  if (row === 9) {\n    return true;\n  }\n\n  /*if (sudoku[row][col] !== null) {\n    return fillSudoku(sudoku, row, col + 1);\n  }*/\n\n  let possibleValues = shuffle([1, 2, 3, 4, 5, 6, 7, 8, 9]);\n  for (let i = 0; i < possibleValues.length; i++) {\n    let value = possibleValues[i];\n    if (isValid(sudoku, row, col, value)) {\n      sudoku[row][col] = value;\n      if (fillSudoku(sudoku, row, col + 1)) {\n        return true;\n      }\n      sudoku[row][col] = null;\n    }\n  }\n  return false;\n}\nfunction fillPartialSudoku(sudoku, partialSudoku, row, col) {\n  if (col === 9) {\n    col = 0;\n    row++;\n  }\n  if (row === 9) {\n    return true;\n  }\n  if (sudoku[row][col] == partialSudoku[row][col]) {\n    return fillPartialSudoku(sudoku, partialSudoku, row, col + 1);\n  }\n  let possibleValues = shuffle([1, 2, 3, 4, 5, 6, 7, 8, 9]);\n  for (let i = 0; i < possibleValues.length; i++) {\n    let value = possibleValues[i];\n    if (isValid(partialSudoku, row, col, value)) {\n      partialSudoku[row][col] = value;\n      if (fillPartialSudoku(sudoku, partialSudoku, row, col + 1)) {\n        return true;\n      }\n      partialSudoku[row][col] = null;\n    }\n  }\n  return false;\n}\n\n//checking if the number is valid or not in the sudoku\n\nfunction isValid(sudoku, row, col, value) {\n  for (let i = 0; i < 9; i++) {\n    if (sudoku[row][i] === value || sudoku[i][col] === value) {\n      return false;\n    }\n  }\n  let rowCorner = Math.floor(row / 3) * 3;\n  let colCorner = Math.floor(col / 3) * 3;\n  for (let i = rowCorner; i < rowCorner + 3; i++) {\n    for (let j = colCorner; j < colCorner + 3; j++) {\n      if (sudoku[i][j] === value) {\n        return false;\n      }\n    }\n  }\n  return true;\n}\n\n//shuffle algorithm that is in the order of trying values\n\nfunction shuffle(array) {\n  for (let i = array.length - 1; i > 0; i--) {\n    let j = Math.floor(Math.random() * (i + 1));\n    [array[i], array[j]] = [array[j], array[i]];\n  }\n  return array;\n}\nfunction generateSudoku() {\n  let sudoku = new Array(9).fill(null).map(() => new Array(9).fill(null));\n  fillSudoku(sudoku, 0, 0);\n  return sudoku;\n}\nconst Square = props => {\n  return /*#__PURE__*/_jsxDEV(\"td\", {\n    children: /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"number\",\n      defaultValue: props.element\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 8\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 137,\n    columnNumber: 4\n  }, this);\n};\n_c = Square;\nconst Sudokurow = props => {\n  return /*#__PURE__*/_jsxDEV(\"tr\", {\n    children: props.row.map(element => /*#__PURE__*/_jsxDEV(Square, {\n      element: element\n    }, element, false, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 31\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 143,\n    columnNumber: 7\n  }, this);\n};\n_c2 = Sudokurow;\nconst App = () => {\n  const sudokuArray = generateSudoku();\n  const partialSudoku = removeCells(sudokuArray, 15);\n  const solutionPartial = fillPartialSudoku(sudokuArray, partialSudoku, 0, 0);\n  console.log(solutionPartial);\n  console.log(sudokuArray);\n  console.log(sudokuArray);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.container,\n    children: /*#__PURE__*/_jsxDEV(\"table\", {\n      className: styles.sudoku,\n      children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: partialSudoku.map(row => /*#__PURE__*/_jsxDEV(Sudokurow, {\n          row: row\n        }, row, false, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 37\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 158,\n    columnNumber: 5\n  }, this);\n};\n_c3 = App;\nexport default App;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"Square\");\n$RefreshReg$(_c2, \"Sudokurow\");\n$RefreshReg$(_c3, \"App\");","map":{"version":3,"names":["styles","jsxDEV","_jsxDEV","removeCells","grid","numCells","partialGrid","JSON","parse","stringify","positions","row","col","push","i","length","j","Math","floor","random","fillSudoku","sudoku","possibleValues","shuffle","value","isValid","fillPartialSudoku","partialSudoku","rowCorner","colCorner","array","generateSudoku","Array","fill","map","Square","props","children","type","defaultValue","element","fileName","_jsxFileName","lineNumber","columnNumber","_c","Sudokurow","_c2","App","sudokuArray","solutionPartial","console","log","className","container","_c3","$RefreshReg$"],"sources":["/Users/elenarima/Desktop/projects/sudoku/src/App.js"],"sourcesContent":["import styles from \"./styles/App.module.css\"\n\n\n\n//move cells from already created sudoku\nfunction removeCells(grid, numCells) {\n  // Make a copy of the grid to modify\n  let partialGrid = JSON.parse(JSON.stringify(grid));\n\n  // Get a list of all the cell positions\n  let positions = [];\n  for (let row = 0; row < 9; row++) {\n    for (let col = 0; col < 9; col++) {\n      positions.push([row, col]);\n    }\n  }\n\n  // Shuffle the positions list to select cells randomly\n  for (let i = positions.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [positions[i], positions[j]] = [positions[j], positions[i]];\n  }\n\n  // Remove the specified number of cells from the partial grid\n  for (let i = 0; i < numCells; i++) {\n    let [row, col] = positions[i];\n    partialGrid[row][col] = null;\n  }\n\n  return partialGrid;\n}\n\n//sudoku filling algorithm from zero\n\nfunction fillSudoku(sudoku, row, col) {\n  if (col === 9) {\n    col = 0;\n    row++;\n  }\n\n  if (row === 9) {\n    return true;\n  }\n\n  /*if (sudoku[row][col] !== null) {\n    return fillSudoku(sudoku, row, col + 1);\n  }*/\n\n  let possibleValues = shuffle([1, 2, 3, 4, 5, 6, 7, 8, 9]);\n\n  for (let i = 0; i < possibleValues.length; i++) {\n    let value = possibleValues[i];\n    if (isValid(sudoku, row, col, value)) {\n      sudoku[row][col] = value;\n      if (fillSudoku(sudoku, row, col + 1)) {\n        return true;\n      }\n      sudoku[row][col] = null;\n    }\n  }\n\n  return false;\n}\n\n\nfunction fillPartialSudoku(sudoku,partialSudoku, row, col) {\n    if (col === 9) {\n      col = 0;\n      row++;\n    }\n\n    if (row === 9) {\n      return true;\n    }\n\n    if (sudoku[row][col] == partialSudoku[row][col]) {\n      return fillPartialSudoku(sudoku,partialSudoku, row, col + 1);\n    }\n\n    let possibleValues = shuffle([1, 2, 3, 4, 5, 6, 7, 8, 9]);\n\n    for (let i = 0; i < possibleValues.length; i++) {\n      let value = possibleValues[i];\n      if (isValid(partialSudoku, row, col, value)) {\n        partialSudoku[row][col] = value;\n        if (fillPartialSudoku(sudoku,partialSudoku, row, col + 1)) {\n          return true;\n        }\n        partialSudoku[row][col] = null;\n      }\n    }\n\n    return false;\n  }\n\n\n//checking if the number is valid or not in the sudoku\n\nfunction isValid(sudoku, row, col, value) {\n  for (let i = 0; i < 9; i++) {\n    if (sudoku[row][i] === value || sudoku[i][col] === value) {\n      return false;\n    }\n  }\n  let rowCorner = Math.floor(row / 3) * 3;\n  let colCorner = Math.floor(col / 3) * 3;\n  for (let i = rowCorner; i < rowCorner + 3; i++) {\n    for (let j = colCorner; j < colCorner + 3; j++) {\n      if (sudoku[i][j] === value) {\n        return false;\n      }\n    }\n  }\n  return true;\n}\n\n//shuffle algorithm that is in the order of trying values\n\nfunction shuffle(array) {\n  for (let i = array.length - 1; i > 0; i--) {\n    let j = Math.floor(Math.random() * (i + 1));\n    [array[i], array[j]] = [array[j], array[i]];\n  }\n  return array;\n}\n\n\nfunction generateSudoku() {\n  let sudoku = new Array(9).fill(null).map(() => new Array(9).fill(null));\n  fillSudoku(sudoku, 0, 0);\n  return sudoku;\n}\n\n\nconst Square=(props)=> {\n  return (\n   <td><input type=\"number\" defaultValue={props.element}></input></td>\n  )\n}\n\nconst Sudokurow=(props)=> {\n  return(\n      <tr>\n      {props.row.map(element=><Square key= {element} element={element}/>)}\n      </tr>\n    )\n}\n\n\nconst App = () => {\n  const sudokuArray = generateSudoku()\n  const partialSudoku = removeCells(sudokuArray, 15)\n  const solutionPartial = fillPartialSudoku(sudokuArray,partialSudoku,0,0)\n  console.log(solutionPartial)\n  console.log(sudokuArray)\n  console.log(sudokuArray)\n    return (\n    <div className={styles.container}>\n\n      <table className= {styles.sudoku}>\n        <tbody>\n          {partialSudoku.map(row => <Sudokurow  key= {row} row={row}/>)}\n        </tbody>\n      </table>\n    \n    </div>\n    )\n  }\n\nexport default App"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}