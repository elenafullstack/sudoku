{"ast":null,"code":"var _jsxFileName = \"/Users/elenarima/Desktop/projects/sudoku/src/App.js\",\n  _s = $RefreshSig$();\nimport styles from \"./styles/App.module.css\";\nimport React, { useState, useRef, useMemo } from 'react';\n\n//move cells from already created sudoku\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction removeCells(grid, numCells) {\n  // Make a copy of the grid to modify\n  let partialGrid = grid.map(row => [...row]);\n\n  // Get a list of all the cell positions\n  let positions = [];\n  for (let row = 0; row < 9; row++) {\n    for (let col = 0; col < 9; col++) {\n      positions.push([row, col]);\n    }\n  }\n\n  // Shuffle the positions list to select cells randomly\n  for (let i = positions.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [positions[i], positions[j]] = [positions[j], positions[i]];\n  }\n\n  // Remove the specified number of cells from the partial grid\n  for (let i = 0; i < numCells; i++) {\n    let [row, col] = positions[i];\n    partialGrid[row][col] = null;\n  }\n  return partialGrid;\n}\n//sudoku filling algorithm from zero\n\nfunction fillSudoku(sudoku, row, col) {\n  if (col === 9) {\n    col = 0;\n    row++;\n  }\n  if (row === 9) {\n    return true;\n  }\n\n  /*if (sudoku[row][col] !== null) {\n    return fillSudoku(sudoku, row, col + 1);\n  }*/\n\n  let possibleValues = shuffle([1, 2, 3, 4, 5, 6, 7, 8, 9]);\n  for (let i = 0; i < possibleValues.length; i++) {\n    let value = possibleValues[i];\n    if (isValid(sudoku, row, col, value)) {\n      sudoku[row][col] = value;\n      if (fillSudoku(sudoku, row, col + 1)) {\n        return true;\n      }\n      sudoku[row][col] = null;\n    }\n  }\n  return false;\n}\nfunction fillPartialSudoku(sudoku, partialSudoku, row, col) {\n  if (col === 9) {\n    col = 0;\n    row++;\n  }\n  if (row === 9) {\n    return true;\n  }\n  if (sudoku[row][col] == partialSudoku[row][col]) {\n    return fillPartialSudoku(sudoku, partialSudoku, row, col + 1);\n  }\n  let possibleValues = shuffle([1, 2, 3, 4, 5, 6, 7, 8, 9]);\n  for (let i = 0; i < possibleValues.length; i++) {\n    let value = possibleValues[i];\n    if (isValid(partialSudoku, row, col, value)) {\n      partialSudoku[row][col] = value;\n      if (fillPartialSudoku(sudoku, partialSudoku, row, col + 1)) {\n        return true;\n      }\n      partialSudoku[row][col] = null;\n    }\n  }\n  return false;\n}\n\n//checking if the number is valid or not in the sudoku\n\nfunction isValid(sudoku, row, col, value) {\n  for (let i = 0; i < 9; i++) {\n    if (sudoku[row][i] === value || sudoku[i][col] === value) {\n      return false;\n    }\n  }\n  let rowCorner = Math.floor(row / 3) * 3;\n  let colCorner = Math.floor(col / 3) * 3;\n  for (let i = rowCorner; i < rowCorner + 3; i++) {\n    for (let j = colCorner; j < colCorner + 3; j++) {\n      if (sudoku[i][j] === value) {\n        return false;\n      }\n    }\n  }\n  return true;\n}\n\n//shuffle algorithm that is in the order of trying values\n\nfunction shuffle(array) {\n  for (let i = array.length - 1; i > 0; i--) {\n    let j = Math.floor(Math.random() * (i + 1));\n    [array[i], array[j]] = [array[j], array[i]];\n  }\n  return array;\n}\nfunction compare(sudoku, correct) {\n  for (let i = 0; i < sudoku.length; i++) {\n    for (let j = 0; j < sudoku[i].length; j++) {\n      if (sudoku[i][j] != correct[i][j]) return false;\n    }\n  }\n  return true;\n}\nfunction checkSolution(sudoku, correct) {\n  if (compare(sudoku, correct)) {\n    setMessage(\"sudoku has been solved correctly. congratz\");\n    setInterval(setMessage(''));\n  } else {\n    console.log(\"sudoku is not solved correctly. please try again\");\n  }\n}\nfunction generateSudoku() {\n  let sudoku = new Array(9).fill(null).map(() => new Array(9).fill(null));\n  fillSudoku(sudoku, 0, 0);\n  return sudoku;\n}\nconst Square = props => {\n  if (props.element !== null) {\n    return /*#__PURE__*/_jsxDEV(\"td\", {\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        defaultValue: props.element,\n        readOnly: true,\n        disabled: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 7\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"td\", {\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        onChange: props.function\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 7\n    }, this);\n  }\n};\n_c = Square;\nconst Sudokurow = props => {\n  return /*#__PURE__*/_jsxDEV(\"tr\", {\n    children: props.row.map((element, elementIndex) => /*#__PURE__*/_jsxDEV(Square, {\n      element: element,\n      function: props.function\n    }, elementIndex, false, {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 43\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 172,\n    columnNumber: 5\n  }, this);\n};\n_c2 = Sudokurow;\nconst App = () => {\n  _s();\n  const sudokuArray = useRef(generateSudoku());\n  console.log(sudokuArray.current);\n  const [partialSudoku, setPartialSudoku] = useState(removeCells(sudokuArray.current, 1));\n  const [checkedSudoku, setCheckedSudoku] = useState([...partialSudoku]);\n  const [message, setMessage] = useState('');\n  const updateValue = (rowIndex, colIndex, newValue) => {\n    setCheckedSudoku(checkedSudoku => {\n      return checkedSudoku.map((row, i) => {\n        if (i === rowIndex) {\n          return row.map((val, j) => {\n            if (j === colIndex) {\n              return newValue;\n            }\n            return val;\n          });\n        }\n        return row;\n      });\n    });\n  };\n  const handleInput = event => {\n    var input = event.target; // get reference to the input element that triggered the event\n    var row = input.parentNode.parentNode.rowIndex; // get row index of the clicked input\n    var col = input.parentNode.cellIndex; // get column index of the clicked input\n    console.log(\"Row: \" + row + \", Column: \" + col);\n    updateValue(row, col, parseInt(input.value));\n  };\n\n  /*let partialCopy = partialSudoku.map(row => [...row]);\n  fillPartialSudoku(sudokuArray,partialCopy,0,0)\n  console.log(partialCopy)\n  console.log(sudokuArray)*/\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.container,\n      children: /*#__PURE__*/_jsxDEV(\"table\", {\n        className: styles.sudoku,\n        children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: partialSudoku.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(Sudokurow, {\n            row: row,\n            function: handleInput\n          }, rowIndex, false, {\n            fileName: _jsxFileName,\n            lineNumber: 227,\n            columnNumber: 48\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 226,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => checkSolution(checkedSudoku, sudokuArray.current),\n      children: \"Send your solution\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      id: \"Message\",\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true);\n};\n_s(App, \"x5GnrH+669YrAvcbUjS0i97lNQg=\");\n_c3 = App;\nexport default App;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"Square\");\n$RefreshReg$(_c2, \"Sudokurow\");\n$RefreshReg$(_c3, \"App\");","map":{"version":3,"names":["styles","React","useState","useRef","useMemo","jsxDEV","_jsxDEV","Fragment","_Fragment","removeCells","grid","numCells","partialGrid","map","row","positions","col","push","i","length","j","Math","floor","random","fillSudoku","sudoku","possibleValues","shuffle","value","isValid","fillPartialSudoku","partialSudoku","rowCorner","colCorner","array","compare","correct","checkSolution","setMessage","setInterval","console","log","generateSudoku","Array","fill","Square","props","element","children","type","defaultValue","readOnly","disabled","fileName","_jsxFileName","lineNumber","columnNumber","onChange","function","_c","Sudokurow","elementIndex","_c2","App","_s","sudokuArray","current","setPartialSudoku","checkedSudoku","setCheckedSudoku","message","updateValue","rowIndex","colIndex","newValue","val","handleInput","event","input","target","parentNode","cellIndex","parseInt","className","container","onClick","id","_c3","$RefreshReg$"],"sources":["/Users/elenarima/Desktop/projects/sudoku/src/App.js"],"sourcesContent":["import styles from \"./styles/App.module.css\"\nimport React, { useState, useRef, useMemo } from 'react'\n\n\n//move cells from already created sudoku\nfunction removeCells(grid, numCells) {\n  // Make a copy of the grid to modify\n  let partialGrid = grid.map(row => [...row]);\n\n  // Get a list of all the cell positions\n  let positions = [];\n  for (let row = 0; row < 9; row++) {\n    for (let col = 0; col < 9; col++) {\n      positions.push([row, col]);\n    }\n  }\n\n  // Shuffle the positions list to select cells randomly\n  for (let i = positions.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [positions[i], positions[j]] = [positions[j], positions[i]];\n  }\n\n  // Remove the specified number of cells from the partial grid\n  for (let i = 0; i < numCells; i++) {\n    let [row, col] = positions[i];\n    partialGrid[row][col] = null;\n  }\n\n  return partialGrid;\n}\n//sudoku filling algorithm from zero\n\nfunction fillSudoku(sudoku, row, col) {\n  if (col === 9) {\n    col = 0;\n    row++;\n  }\n\n  if (row === 9) {\n    return true;\n  }\n\n  /*if (sudoku[row][col] !== null) {\n    return fillSudoku(sudoku, row, col + 1);\n  }*/\n\n  let possibleValues = shuffle([1, 2, 3, 4, 5, 6, 7, 8, 9]);\n  for (let i = 0; i < possibleValues.length; i++) {\n    let value = possibleValues[i];\n    if (isValid(sudoku, row, col, value)) {\n      sudoku[row][col] = value;\n      if (fillSudoku(sudoku, row, col + 1)) {\n        return true;\n      }\n      sudoku[row][col] = null;\n    }\n  }\n\n  return false;\n}\n\n\nfunction fillPartialSudoku(sudoku,partialSudoku, row, col) {\n    if (col === 9) {\n      col = 0;\n      row++;\n    }\n\n    if (row === 9) {\n      return true;\n    }\n\n    if (sudoku[row][col] == partialSudoku[row][col]) {\n      return fillPartialSudoku(sudoku,partialSudoku, row, col + 1);\n    }\n\n    let possibleValues = shuffle([1, 2, 3, 4, 5, 6, 7, 8, 9]);\n\n    for (let i = 0; i < possibleValues.length; i++) {\n      let value = possibleValues[i];\n      if (isValid(partialSudoku, row, col, value)) {\n        partialSudoku[row][col] = value;\n        if (fillPartialSudoku(sudoku,partialSudoku, row, col + 1)) {\n          return true;\n        }\n        partialSudoku[row][col] = null;\n      }\n    }\n\n    return false;\n  }\n\n\n//checking if the number is valid or not in the sudoku\n\nfunction isValid(sudoku, row, col, value) {\n  for (let i = 0; i < 9; i++) {\n    if (sudoku[row][i] === value || sudoku[i][col] === value) {\n      return false;\n    }\n  }\n  let rowCorner = Math.floor(row / 3) * 3;\n  let colCorner = Math.floor(col / 3) * 3;\n  for (let i = rowCorner; i < rowCorner + 3; i++) {\n    for (let j = colCorner; j < colCorner + 3; j++) {\n      if (sudoku[i][j] === value) {\n        return false;\n      }\n    }\n  }\n  return true;\n}\n\n//shuffle algorithm that is in the order of trying values\n\nfunction shuffle(array) {\n  for (let i = array.length - 1; i > 0; i--) {\n    let j = Math.floor(Math.random() * (i + 1));\n    [array[i], array[j]] = [array[j], array[i]];\n  }\n  return array;\n}\n\n\nfunction compare(sudoku, correct) {\n  for (let i=0; i<sudoku.length;i++)  {\n    for (let j=0;j<sudoku[i].length;j++){\n      if (sudoku[i][j] != correct[i][j])\n      return false\n    }\n  }\n  return true\n  \n}\n\nfunction checkSolution(sudoku, correct){\n  if (compare(sudoku,correct)){\n    setMessage(\"sudoku has been solved correctly. congratz\")\n    setInterval(setMessage(''))\n  } else {\n    console.log(\"sudoku is not solved correctly. please try again\")\n  }\n}\n\n\n\n\nfunction generateSudoku() {\n  let sudoku = new Array(9).fill(null).map(() => new Array(9).fill(null));\n  fillSudoku(sudoku, 0, 0);\n  return sudoku;\n}\n\n\n\nconst Square=(props)=> {\n\n  if (props.element !== null ) {\n    return (\n      <td><input type=\"number\" defaultValue={props.element} readOnly disabled></input></td>\n     ) \n  } else {\n    return (\n      <td><input type=\"number\" onChange = {props.function} ></input></td>\n    )\n  }\n}\n\nconst Sudokurow=(props)=> {\n  return (\n    <tr>\n  {props.row.map((element, elementIndex)=><Square key= {elementIndex} element={element} function={props.function}/>)}\n  </tr>\n  )\n  \n}\n\nconst App = () => {\n\n  \n  const sudokuArray = useRef(generateSudoku());\n  console.log(sudokuArray.current)\n\n const [partialSudoku, setPartialSudoku] = useState(removeCells(sudokuArray.current, 1))\n const [checkedSudoku, setCheckedSudoku] = useState([...partialSudoku])\n const [message,setMessage] = useState('')\n const updateValue = (rowIndex, colIndex, newValue) => {\n\n\n  setCheckedSudoku(checkedSudoku => {\n    return checkedSudoku.map((row, i) => {\n      if (i === rowIndex) {\n        return row.map((val, j) => {\n          if (j === colIndex) {\n            return newValue;\n          }\n          return val;\n        });\n      }\n      return row;\n    });\n  });\n};\n\n\nconst handleInput = (event) => {\n  var input = event.target; // get reference to the input element that triggered the event\n  var row = input.parentNode.parentNode.rowIndex; // get row index of the clicked input\n  var col = input.parentNode.cellIndex; // get column index of the clicked input\n  console.log(\"Row: \" + row + \", Column: \" + col);\n  updateValue(row,col,parseInt(input.value))\n\n\n}\n \n  /*let partialCopy = partialSudoku.map(row => [...row]);\n  fillPartialSudoku(sudokuArray,partialCopy,0,0)\n  console.log(partialCopy)\n  console.log(sudokuArray)*/\n\n    return (\n      <>\n    <div className={styles.container}>\n      <table className= {styles.sudoku}>\n        <tbody>\n          {partialSudoku.map((row,rowIndex) => <Sudokurow  key= {rowIndex} row={row} function={handleInput} />)}\n        </tbody>\n      </table>\n      </div>\n    <button onClick= {()=>checkSolution(checkedSudoku, sudokuArray.current)}>Send your solution</button>\n    <h1 id=\"Message\">{message}</h1>\n    </>\n    )\n  }\n\nexport default App"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}