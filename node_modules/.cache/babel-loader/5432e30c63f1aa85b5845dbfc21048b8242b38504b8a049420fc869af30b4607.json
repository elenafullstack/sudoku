{"ast":null,"code":"var _jsxFileName = \"/Users/elenarima/Desktop/projects/sudoku/src/App.js\",\n  _s = $RefreshSig$();\nimport styles from \"./styles/App.module.css\";\nimport React, { useState } from 'react';\n\n//move cells from already created sudoku\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction removeCells(grid, numCells) {\n  // Make a copy of the grid to modify\n  let partialGrid = grid.map(row => [...row]);\n\n  // Get a list of all the cell positions\n  let positions = [];\n  for (let row = 0; row < 9; row++) {\n    for (let col = 0; col < 9; col++) {\n      positions.push([row, col]);\n    }\n  }\n\n  // Shuffle the positions list to select cells randomly\n  for (let i = positions.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [positions[i], positions[j]] = [positions[j], positions[i]];\n  }\n\n  // Remove the specified number of cells from the partial grid\n  for (let i = 0; i < numCells; i++) {\n    let [row, col] = positions[i];\n    partialGrid[row][col] = null;\n  }\n  return partialGrid;\n}\n//sudoku filling algorithm from zero\n\nfunction fillSudoku(sudoku, row, col) {\n  if (col === 9) {\n    col = 0;\n    row++;\n  }\n  if (row === 9) {\n    return true;\n  }\n\n  /*if (sudoku[row][col] !== null) {\n    return fillSudoku(sudoku, row, col + 1);\n  }*/\n\n  let possibleValues = shuffle([1, 2, 3, 4, 5, 6, 7, 8, 9]);\n  for (let i = 0; i < possibleValues.length; i++) {\n    let value = possibleValues[i];\n    if (isValid(sudoku, row, col, value)) {\n      sudoku[row][col] = value;\n      if (fillSudoku(sudoku, row, col + 1)) {\n        return true;\n      }\n      sudoku[row][col] = null;\n    }\n  }\n  return false;\n}\nfunction fillPartialSudoku(sudoku, partialSudoku, row, col) {\n  if (col === 9) {\n    col = 0;\n    row++;\n  }\n  if (row === 9) {\n    return true;\n  }\n  if (sudoku[row][col] == partialSudoku[row][col]) {\n    return fillPartialSudoku(sudoku, partialSudoku, row, col + 1);\n  }\n  let possibleValues = shuffle([1, 2, 3, 4, 5, 6, 7, 8, 9]);\n  for (let i = 0; i < possibleValues.length; i++) {\n    let value = possibleValues[i];\n    if (isValid(partialSudoku, row, col, value)) {\n      partialSudoku[row][col] = value;\n      if (fillPartialSudoku(sudoku, partialSudoku, row, col + 1)) {\n        return true;\n      }\n      partialSudoku[row][col] = null;\n    }\n  }\n  return false;\n}\n\n//checking if the number is valid or not in the sudoku\n\nfunction isValid(sudoku, row, col, value) {\n  for (let i = 0; i < 9; i++) {\n    if (sudoku[row][i] === value || sudoku[i][col] === value) {\n      return false;\n    }\n  }\n  let rowCorner = Math.floor(row / 3) * 3;\n  let colCorner = Math.floor(col / 3) * 3;\n  for (let i = rowCorner; i < rowCorner + 3; i++) {\n    for (let j = colCorner; j < colCorner + 3; j++) {\n      if (sudoku[i][j] === value) {\n        return false;\n      }\n    }\n  }\n  return true;\n}\n\n//shuffle algorithm that is in the order of trying values\n\nfunction shuffle(array) {\n  for (let i = array.length - 1; i > 0; i--) {\n    let j = Math.floor(Math.random() * (i + 1));\n    [array[i], array[j]] = [array[j], array[i]];\n  }\n  return array;\n}\nfunction checkSoltuion(sudoku, correct) {\n  if (sudoku === correct) {\n    console.log(\"sudoku has been solved correctly\");\n  } else {\n    console.log(\"sudoku is not correct. please try again\");\n  }\n}\nconst handleInput = event => {\n  var input = event.target; // get reference to the input element that triggered the event\n  var i = input.parentNode.parentNode.rowIndex; // get row index of the clicked input\n  var j = input.parentNode.cellIndex; // get column index of the clicked input\n  setPartialSudoku;\n  console.log(\"Row: \" + row + \", Column: \" + col);\n  setPartialSudoku(partialSudoku => {\n    return partialSudoku.map((row, i) => {\n      if (i === rowIndex) {\n        return row.map((val, j) => {\n          if (j === colIndex) {\n            return newValue;\n          }\n          return val;\n        });\n      }\n      return row;\n    });\n  });\n};\nfunction generateSudoku() {\n  let sudoku = new Array(9).fill(null).map(() => new Array(9).fill(null));\n  fillSudoku(sudoku, 0, 0);\n  return sudoku;\n}\nconst Square = props => {\n  if (props.element !== null) {\n    return /*#__PURE__*/_jsxDEV(\"td\", {\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        className: styles.filled,\n        defaultValue: props.element,\n        readOnly: true,\n        disabled: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 7\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"td\", {\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        className: styles.unfilled,\n        onChange: handleInput\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 7\n    }, this);\n  }\n};\n_c = Square;\nconst Sudokurow = props => {\n  return /*#__PURE__*/_jsxDEV(\"tr\", {\n    children: props.row.map((element, elementIndex) => /*#__PURE__*/_jsxDEV(Square, {\n      element: element\n    }, elementIndex, false, {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 43\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 182,\n    columnNumber: 5\n  }, this);\n};\n_c2 = Sudokurow;\nconst App = () => {\n  _s();\n  const sudokuArray = generateSudoku();\n  const [partialSudoku, setPartialSudoku] = useState(removeCells(sudokuArray, 30));\n  let partialCopy = partialSudoku.map(row => [...row]);\n  fillPartialSudoku(sudokuArray, partialCopy, 0, 0);\n  console.log(partialCopy);\n  console.log(sudokuArray);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.container,\n      children: /*#__PURE__*/_jsxDEV(\"table\", {\n        className: styles.sudoku,\n        children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: partialSudoku.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(Sudokurow, {\n            row: row\n          }, rowIndex, false, {\n            fileName: _jsxFileName,\n            lineNumber: 202,\n            columnNumber: 48\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => checkSoltuion(partialSudoku, sudokuArray),\n      children: \"Send your solution\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true);\n};\n_s(App, \"221d39mlxohwNOxlhDe0CLgwvmg=\");\n_c3 = App;\nexport default App;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"Square\");\n$RefreshReg$(_c2, \"Sudokurow\");\n$RefreshReg$(_c3, \"App\");","map":{"version":3,"names":["styles","React","useState","jsxDEV","_jsxDEV","Fragment","_Fragment","removeCells","grid","numCells","partialGrid","map","row","positions","col","push","i","length","j","Math","floor","random","fillSudoku","sudoku","possibleValues","shuffle","value","isValid","fillPartialSudoku","partialSudoku","rowCorner","colCorner","array","checkSoltuion","correct","console","log","handleInput","event","input","target","parentNode","rowIndex","cellIndex","setPartialSudoku","val","colIndex","newValue","generateSudoku","Array","fill","Square","props","element","children","type","className","filled","defaultValue","readOnly","disabled","fileName","_jsxFileName","lineNumber","columnNumber","unfilled","onChange","_c","Sudokurow","elementIndex","_c2","App","_s","sudokuArray","partialCopy","container","onClick","_c3","$RefreshReg$"],"sources":["/Users/elenarima/Desktop/projects/sudoku/src/App.js"],"sourcesContent":["import styles from \"./styles/App.module.css\"\nimport React, { useState} from 'react'\n\n\n//move cells from already created sudoku\nfunction removeCells(grid, numCells) {\n  // Make a copy of the grid to modify\n  let partialGrid = grid.map(row => [...row]);\n\n  // Get a list of all the cell positions\n  let positions = [];\n  for (let row = 0; row < 9; row++) {\n    for (let col = 0; col < 9; col++) {\n      positions.push([row, col]);\n    }\n  }\n\n  // Shuffle the positions list to select cells randomly\n  for (let i = positions.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [positions[i], positions[j]] = [positions[j], positions[i]];\n  }\n\n  // Remove the specified number of cells from the partial grid\n  for (let i = 0; i < numCells; i++) {\n    let [row, col] = positions[i];\n    partialGrid[row][col] = null;\n  }\n\n  return partialGrid;\n}\n//sudoku filling algorithm from zero\n\nfunction fillSudoku(sudoku, row, col) {\n  if (col === 9) {\n    col = 0;\n    row++;\n  }\n\n  if (row === 9) {\n    return true;\n  }\n\n  /*if (sudoku[row][col] !== null) {\n    return fillSudoku(sudoku, row, col + 1);\n  }*/\n\n  let possibleValues = shuffle([1, 2, 3, 4, 5, 6, 7, 8, 9]);\n  for (let i = 0; i < possibleValues.length; i++) {\n    let value = possibleValues[i];\n    if (isValid(sudoku, row, col, value)) {\n      sudoku[row][col] = value;\n      if (fillSudoku(sudoku, row, col + 1)) {\n        return true;\n      }\n      sudoku[row][col] = null;\n    }\n  }\n\n  return false;\n}\n\n\nfunction fillPartialSudoku(sudoku,partialSudoku, row, col) {\n    if (col === 9) {\n      col = 0;\n      row++;\n    }\n\n    if (row === 9) {\n      return true;\n    }\n\n    if (sudoku[row][col] == partialSudoku[row][col]) {\n      return fillPartialSudoku(sudoku,partialSudoku, row, col + 1);\n    }\n\n    let possibleValues = shuffle([1, 2, 3, 4, 5, 6, 7, 8, 9]);\n\n    for (let i = 0; i < possibleValues.length; i++) {\n      let value = possibleValues[i];\n      if (isValid(partialSudoku, row, col, value)) {\n        partialSudoku[row][col] = value;\n        if (fillPartialSudoku(sudoku,partialSudoku, row, col + 1)) {\n          return true;\n        }\n        partialSudoku[row][col] = null;\n      }\n    }\n\n    return false;\n  }\n\n\n//checking if the number is valid or not in the sudoku\n\nfunction isValid(sudoku, row, col, value) {\n  for (let i = 0; i < 9; i++) {\n    if (sudoku[row][i] === value || sudoku[i][col] === value) {\n      return false;\n    }\n  }\n  let rowCorner = Math.floor(row / 3) * 3;\n  let colCorner = Math.floor(col / 3) * 3;\n  for (let i = rowCorner; i < rowCorner + 3; i++) {\n    for (let j = colCorner; j < colCorner + 3; j++) {\n      if (sudoku[i][j] === value) {\n        return false;\n      }\n    }\n  }\n  return true;\n}\n\n//shuffle algorithm that is in the order of trying values\n\nfunction shuffle(array) {\n  for (let i = array.length - 1; i > 0; i--) {\n    let j = Math.floor(Math.random() * (i + 1));\n    [array[i], array[j]] = [array[j], array[i]];\n  }\n  return array;\n}\n\nfunction checkSoltuion(sudoku, correct) {\n  if (sudoku === correct) {\n    console.log(\"sudoku has been solved correctly\")\n  } else {\n    console.log(\"sudoku is not correct. please try again\")\n  }\n}\n\nconst handleInput = (event) => {\n  var input = event.target; // get reference to the input element that triggered the event\n  var i = input.parentNode.parentNode.rowIndex; // get row index of the clicked input\n  var j = input.parentNode.cellIndex; // get column index of the clicked input\n  setPartialSudoku\n  console.log(\"Row: \" + row + \", Column: \" + col);\n\n  setPartialSudoku(partialSudoku => {\n    return partialSudoku.map((row, i) => {\n      if (i === rowIndex) {\n        return row.map((val, j) => {\n          if (j === colIndex) {\n            return newValue;\n          }\n          return val;\n        });\n      }\n      return row;\n    });\n  });\n\n\n \n}\n\n\n\nfunction generateSudoku() {\n  let sudoku = new Array(9).fill(null).map(() => new Array(9).fill(null));\n  fillSudoku(sudoku, 0, 0);\n  return sudoku;\n}\n\n\nconst Square=(props)=> {\n\n  if (props.element !== null ) {\n    return (\n      <td><input type=\"number\" className={styles.filled} defaultValue={props.element} readOnly disabled></input></td>\n     ) \n  } else {\n    return (\n      <td><input type=\"number\" className={styles.unfilled} onChange = {handleInput} ></input></td>\n    )\n  }\n}\n\nconst Sudokurow=(props)=> {\n  return (\n    <tr>\n  {props.row.map((element, elementIndex)=><Square key= {elementIndex} element={element}/>)}\n  </tr>\n  )\n  \n}\n\nconst App = () => {\n\n const sudokuArray = generateSudoku()\n const [partialSudoku, setPartialSudoku] = useState(removeCells(sudokuArray, 30))\n  let partialCopy = partialSudoku.map(row => [...row]);\n  fillPartialSudoku(sudokuArray,partialCopy,0,0)\n  console.log(partialCopy)\n  console.log(sudokuArray)\n    return (\n      <>\n    <div className={styles.container}>\n      <table className= {styles.sudoku}>\n        <tbody>\n          {partialSudoku.map((row,rowIndex) => <Sudokurow  key= {rowIndex} row={row}/>)}\n        </tbody>\n      </table>\n      </div>\n    <button onClick= {()=>checkSoltuion(partialSudoku, sudokuArray)}>Send your solution</button>\n    </>\n    )\n  }\n\nexport default App"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}